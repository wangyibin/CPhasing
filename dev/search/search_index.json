{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation","text":"C-Phasing <p> Phasing and scaffolding polyploid genomes based on Pore-C, Ultra-long, or Hi-C data</p> <p>.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>One of the major problems with Hi-C scaffolding of polyploid genomes is a large proportion of ambiguous short-read mapping, leading to a high-level of switched or chimeric assemblies. Now, the long-read-based chromosome conformation capture technology, e.g., Pore-C, provides an effective way to overcome this problem. Here, we developed a new pipeline, namely <code>C-Phasing</code>, which is specifically tailored for polyploid phasing by leveraging the advantage of Pore-C data. It also works on Hi-C data and diploid genome assembly.  </p> <p>The advantages of <code>C-Phasing</code>:      - High speed.      - High anchor rate of genome.     - High accuracy of polyploid phasing.   </p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#via-activate_cphasing-recommended","title":"Via activate_cphasing (Recommended)","text":"<pre><code>## Download C-Phasing and install all dependencies\ngit clone https://github.com/wangyibin/CPhasing.git\n\n## activate environment (For the first configuration, run it when the network is accessible.)\n./CPhasing/bin/activate_cphasing\n</code></pre> <p>Tip</p> <p>If you do not have direct access to the anaconda repository, you can load the image in the following way.</p>"},{"location":"basic_usage/","title":"Basic Usage","text":""},{"location":"basic_usage/#one-command-pipeline-of-c-phasing","title":"One command pipeline of C-Phasing","text":""},{"location":"basic_usage/#pipeline","title":"pipeline","text":"<p>The <code>-n 8:4</code> parameter of the following commands means assembling a tetraploid (4) with 8 chromosome basic numbers. If you set <code>-n 0:0</code> means partition in both rounds automatically, also support it set to <code>-n 8:0</code> or <code>-n 0:4</code>.  </p>"},{"location":"basic_usage/#start-from-a-pore-c-data","title":"Start from a pore-c data:","text":"<pre><code>cphasing pipeline -f draft.asm.fasta -pcd sample.fastq.gz -t 10 -n 8:4\n</code></pre>"},{"location":"basic_usage/#start-from-multiple-pore-c-data","title":"Start from multiple pore-c data:","text":"<p>specify multiple <code>-pcd</code> parameters.  <pre><code>cphasing pipeline -f draft.asm.fasta -pcd sample1.fastq.gz -pcd sample2.fastq.gz -t 10 -n 8:4\n</code></pre></p> <p>Note</p> <p>If you want to run on cluster system and submit them to multiple nodes, you can use <code>cphasing mapper</code> and <code>cphasing-rs porec-merge</code> to generate the merged <code>porec.gz</code> file and input it by <code>-pct</code> parameter. </p>"},{"location":"basic_usage/#start-from-a-pore-c-table-porecgz","title":"Start from a pore-c table (porec.gz):","text":"<p>which is generated by <code>cphasing mapper</code>. <pre><code>cphasing pipeline -f draft.asm.fasta -pct sample.porec.gz -t 10 -n 8:4\n</code></pre></p>"},{"location":"basic_usage/#start-from-a-paired-end-hi-c-data","title":"Start from a paired-end Hi-C data","text":"<pre><code>cphasing pipeline -f draft.asm.fasta -hic1 Lib_R1.fastq.gz -hic2 Lib_R2.fastq.gz -t 10 -n 8:4\n</code></pre> <p>Note</p> <ul> <li>1 | If you want to run multiple samples, you can use <code>cphasing hic mapper</code> and <code>cphasing-rs pairs-merge</code> to generate the merged <code>pairs.gz</code> file, and input it by <code>-prs</code> parameter.  </li> <li>2 | If the total length of your input genome is larger than 8 Gb, the <code>-hic-mapper-k 27 -hic-mapper-w 14</code> should be specified, to avoid the error of chromap. </li> </ul>"},{"location":"basic_usage/#start-from-a-4dn-pairs-file","title":"Start from a 4DN pairs file,","text":"<p><pre><code>cphasing pipeline -f draft.asm.fasta -prs sample.pairs.gz -t 10 -n 8:4\n</code></pre> - Skip some steps <pre><code>## skip steps 1.alleles and 2.prepare steps \ncphasing pipeline -f draft.asm.fasta -pct sample.porec.gz -t 10 -ss 1,2\n</code></pre></p>"},{"location":"basic_usage/#perform-only-specified-steps","title":"Perform only specified steps","text":"<pre><code>## run 3.hyperpartition \ncphasing pipeline -f draft.asm.fasta -pct sample.porec.gz -t 10 -s 3\n</code></pre>"},{"location":"basic_usage/#improve-performance","title":"Improve performance","text":"<p>Add the <code>-hcr</code> parameter to remove the greedy contacts (several regions contact with the whole genome) to improve the phasing quality. <pre><code>cphasing pipeline -f draft.asm.fasta -pct sample.porec.gz -t 10 -hcr\n</code></pre></p>"},{"location":"basic_usage/#curation-by-juicebox","title":"Curation by Juicebox","text":"<ul> <li>generate <code>.assembly</code> and <code>.hic</code>, depend on 3d-dna </li> </ul> <pre><code>cphasing pairs2mnd sample.pairs.gz -o sample.mnd.txt\ncphasing utils agp2assembly groups.agp &gt; groups.assembly\nbash ~/software/3d-dna/visualize/run-assembly-visualizer.sh sample.assembly sample.mnd.txt\n</code></pre> <p>Note</p> <p>if chimeric corrected, please use <code>groups.corrected.agp</code> and generate a new <code>corrected.pairs.gz</code> by <code>cphasing-rs pairs-break</code> </p> <ul> <li>After curation <pre><code>## convert assembly to agp\ncphasing utils assembly2agp groups.review.assembly -n 8:4 \n## or haploid or a homologous group\ncphasing utils assembly2agp groups.review.assembly -n 8\n## extract contigs from agp \ncphasing agp2fasta groups.review.agp draft.asm.fasta --contigs &gt; contigs.fasta\n## extract chromosome-level fasta from agp\ncphasing agp2fasta groups.review.agp draft.asm.fasta &gt; groups.review.asm.fasta\n</code></pre></li> </ul>"},{"location":"basic_usage/#rename","title":"Rename","text":"<p>Rename and orient chromosome according a monoploid reference (or genome of closely related species). <pre><code>cphasing rename -r mono.fasta -f draft.asm.fasta -a groups.review.agp -t 20\n</code></pre></p> <p>Note</p> <p>To reduce the time consumed, we only align the first haplotype (g1) to the monoploid, which the orientation among different haplotypes has already been set to the same in the <code>scaffolding</code> step. If not, you can set <code>\u2014unphased</code> to align all haplotypes to the monoploid to adjust the orientation.  </p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#the-results-of-the-first-round-partition-are-unsatisfactory","title":"The results of the first round partition are unsatisfactory.","text":"<p>In our two-round partition algorithm, the first round partition depends on the h-trans errors between homologous chromosomes; if you input a contig assembly with low level switch errors or input a high accuracy pore-c data, the h-trans will be not enough to cluster all contigs to correct homologous groups, resulting in unsatisfactory results. You can set the <code>-q1 0</code> for <code>hyperpartition</code> to increase the rate of h-trans errors. However, this parameter may raise error of <code>out of memory</code> when you input huge pore-c data in porec table or hic contacts in pairs file. </p>"},{"location":"faq/#how-to-set-the-n-parameter-when-assembling-an-aneuploid-genome","title":"How to set the <code>-n</code> parameter when assembling an aneuploid genome.","text":"<p>The aneuploid genome, such as modern cultivated sugarcane, contains unequal homologous chromosomes. The <code>-n</code> parameter can be set to zero (<code>-n 10:0</code>) to automatically partition contigs into different chromosomes within a homologous group.    However, we also allow the user to input a file with two columns: the first column is the index(1-base) of the first round partition, and the second column is the chromosome number of each homologous. And then specified the <code>-n 10:second.number.tsv</code> in <code>cphasing pipeline</code> or <code>cphasing hyperpartition</code>. - <code>second.number.tsv</code> <pre><code>1    13\n2    12\n3    12\n4    11\n5    10\n6    12\n7    12\n8    10\n9    12\n10    12\n</code></pre></p>"}]}